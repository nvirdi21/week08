name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # ---------------- Backend ----------------
      - name: Set up Python
        if: matrix.service == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install backend dependencies
        if: matrix.service == 'backend'
        run: |
          cd backend/order_service
          pip install -r requirements.txt
          pip install pytest psycopg2-binary

      - name: Run backend tests
        if: matrix.service == 'backend'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orders
        run: |
          cd backend/order_service
          pytest -v

      # ---------------- Frontend ----------------
      - name: Set up Node.js
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install frontend dependencies
        if: matrix.service == 'frontend'
        run: |
          cd frontend
          npm install

      - name: Build frontend
        if: matrix.service == 'frontend'
        run: |
          cd frontend
          npm run build

  docker-build-push:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/order-service:latest ./backend/order_service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/product-service:latest ./backend/product_service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/order-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/product-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy step
        run: echo "Deploy logic goes here (e.g. kubectl apply, helm upgrade, etc.)"
