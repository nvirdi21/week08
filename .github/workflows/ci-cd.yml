name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Backend setup and tests
      - name: Set up Python
        if: matrix.service == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install order_service dependencies
        if: matrix.service == 'backend'
        run: |
          cd backend/order_service
          pip install -r requirements.txt
          pip install pytest psycopg2-binary

      - name: Run order_service tests
        if: matrix.service == 'backend'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orders
        run: |
          cd backend/order_service
          pytest

      - name: Install product_service dependencies
        if: matrix.service == 'backend'
        run: |
          cd backend/product_service
          pip install -r requirements.txt
          pip install pytest psycopg2-binary

      - name: Run product_service tests
        if: matrix.service == 'backend'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orders
        run: |
          cd backend/product_service
          pytest

      # Frontend build check
      - name: Verify frontend Dockerfile
        if: matrix.service == 'frontend'
        run: |
          test -f frontend/Dockerfile

  docker-build-push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: sit722nooracr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push order_service image
        run: |
          docker build -t sit722nooracr.azurecr.io/order_service:${{ github.sha }} ./backend/order_service
          docker push sit722nooracr.azurecr.io/order_service:${{ github.sha }}

      - name: Build and push product_service image
        run: |
          docker build -t sit722nooracr.azurecr.io/product_service:${{ github.sha }} ./backend/product_service
          docker push sit722nooracr.azurecr.io/product_service:${{ github.sha }}

      - name: Build and push frontend image
        run: |
          docker build -t sit722nooracr.azurecr.io/frontend:${{ github.sha }} ./frontend
          docker push sit722nooracr.azurecr.io/frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      - uses: azure/aks-set-context@v3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: sit722nooraks
          resource-group: sit722-noor-rg

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/order-service-w08e1
          kubectl rollout status deployment/product-service-w08e1
          kubectl rollout status deployment/frontend-w08e1
